#import <Cocoa/Cocoa.h>
#import <WebKit/WebKit.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSApplication *app = [NSApplication sharedApplication];
        [app setActivationPolicy:NSApplicationActivationPolicyRegular];
        
        NSRect frame = NSMakeRect(100, 100, 1000, 700);
        NSWindow *window = [[NSWindow alloc] 
            initWithContentRect:frame
            styleMask:(NSWindowStyleMaskTitled | NSWindowStyleMaskClosable | NSWindowStyleMaskResizable)
            backing:NSBackingStoreBuffered 
            defer:NO];
        
        [window setTitle:@"Final Hybrid - Working Version"];
        [window setBackgroundColor:[NSColor colorWithRed:0.102 green:0.102 blue:0.102 alpha:1.0]];
        
        NSRect webFrame = NSMakeRect(20, 20, 960, 660);
        WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];
        WKWebView *webView = [[WKWebView alloc] initWithFrame:webFrame configuration:config];
        [webView setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
        
        NSString *htmlContent = @"<!DOCTYPE html>\n"
        "<html lang=\"fr\">\n"
        "<head>\n"
        "    <meta charset=\"UTF-8\">\n"
        "    <style>\n"
        "        body {\n"
        "            background: #1a1a1a;\n"
        "            color: #e0e0e0;\n"
        "            font-family: Monaco, monospace;\n"
        "            padding: 20px;\n"
        "            font-size: 14px;\n"
        "            line-height: 1.6;\n"
        "        }\n"
        "        .editor-line {\n"
        "            min-height: 1.8em;\n"
        "            padding: 8px 12px;\n"
        "            margin: 2px 0;\n"
        "            border-radius: 4px;\n"
        "            cursor: text;\n"
        "            transition: all 0.2s ease;\n"
        "        }\n"
        "        .editor-line.current-line {\n"
        "            background-color: rgba(76, 110, 245, 0.15);\n"
        "            border-left: 4px solid #4c6ef5;\n"
        "            padding-left: 16px;\n"
        "        }\n"
        "        .editor-line.rendered-line {\n"
        "            background-color: rgba(255, 255, 255, 0.03);\n"
        "        }\n"
        "        h1 { color: #4c6ef5; font-size: 24px; margin: 0; }\n"
        "        h2 { color: #4c6ef5; font-size: 20px; margin: 0; }\n"
        "        h3 { color: #4c6ef5; font-size: 18px; margin: 0; }\n"
        "        strong { color: #51cf66; font-weight: bold; }\n"
        "        em { color: #ffd43b; font-style: italic; }\n"
        "        u { color: #ff6b6b; text-decoration: underline; }\n"
        "        mark { background: #ffd43b; color: #000; padding: 2px 4px; border-radius: 2px; }\n"
        "    </style>\n"
        "</head>\n"
        "<body>\n"
        "    <h2 style=\"margin-bottom: 20px;\">ðŸš€ Final Hybrid Editor</h2>\n"
        "    \n"
        "    <div id=\"editor\" contenteditable=\"true\" spellcheck=\"false\">\n"
        "        <div class=\"editor-line current-line\" data-line=\"0\"># Titre</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"1\"></div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"2\">Ã‰crivez votre markdown ici...</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"3\"></div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"4\">Exemple:</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"5\">- **Gras**</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"6\">- *Italique*</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"7\">- ==SurlignÃ©==</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"8\">- ++SoulignÃ©++</div>\n"
        "    </div>\n"
        "    \n"
        "    <div style=\"margin-top: 20px; font-size: 12px; color: #666;\" id=\"status\">\n"
        "        Ligne courante: 0 | Cliquez sur une ligne pour la sÃ©lectionner\n"
        "    </div>\n"
        "    \n"
        "    <script>\n"
        "        let currentLineIndex = 0;\n"
        "        const editor = document.getElementById('editor');\n"
        "        const lines = Array.from(editor.querySelectorAll('.editor-line'));\n"
        "        const lineContents = [];\n"
        "        const statusDiv = document.getElementById('status');\n"
        "        \n"
        "        // Store initial content\n"
        "        lines.forEach((line, index) => {\n"
        "            lineContents[index] = line.textContent || '';\n"
        "            console.log('Initial line', index, ':', lineContents[index]);\n"
        "        });\n"
        "        \n"
        "        // Working markdown converter (from our test)\n"
        "        function markdownToHtml(text) {\n"
        "            if (!text || !text.trim()) return '&nbsp;';\n"
        "            \n"
        "            let html = text;\n"
        "            html = html.replace(/^# (.+)$/gm, '<h1>$1</h1>');\n"
        "            html = html.replace(/^## (.+)$/gm, '<h2>$1</h2>');\n"
        "            html = html.replace(/^### (.+)$/gm, '<h3>$1</h3>');\n"
        "            html = html.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>');\n"
        "            html = html.replace(/\\*([^*]+)\\*/g, '<em>$1</em>');\n"
        "            html = html.replace(/==([^=]+)==/g, '<mark>$1</mark>');\n"
        "            html = html.replace(/\\+\\+([^+]+)\\+\\+/g, '<u>$1</u>');\n"
        "            \n"
        "            return html;\n"
        "        }\n"
        "        \n"
        "        function renderLineAsHtml(index) {\n"
        "            if (!lines[index]) return;\n"
        "            const content = lineContents[index] || '';\n"
        "            const html = markdownToHtml(content);\n"
        "            console.log('Rendering line', index, 'as HTML:', content, '->', html);\n"
        "            lines[index].innerHTML = html;\n"
        "        }\n"
        "        \n"
        "        function showLineAsMarkdown(index) {\n"
        "            if (!lines[index]) return;\n"
        "            const content = lineContents[index] || '';\n"
        "            console.log('Showing line', index, 'as markdown:', content);\n"
        "            lines[index].innerHTML = '';\n"
        "            lines[index].textContent = content;\n"
        "        }\n"
        "        \n"
        "        function switchToLine(newIndex) {\n"
        "            if (newIndex === currentLineIndex || !lines[newIndex]) return;\n"
        "            \n"
        "            console.log('\\n=== SWITCHING FROM LINE', currentLineIndex, 'TO LINE', newIndex, '===');\n"
        "            \n"
        "            // Save current line content\n"
        "            if (lines[currentLineIndex]) {\n"
        "                lineContents[currentLineIndex] = lines[currentLineIndex].textContent || '';\n"
        "                console.log('Saved line', currentLineIndex, 'content:', lineContents[currentLineIndex]);\n"
        "            }\n"
        "            \n"
        "            // Render old current line as HTML\n"
        "            if (lines[currentLineIndex]) {\n"
        "                lines[currentLineIndex].classList.remove('current-line');\n"
        "                lines[currentLineIndex].classList.add('rendered-line');\n"
        "                renderLineAsHtml(currentLineIndex);\n"
        "            }\n"
        "            \n"
        "            // Show new line as markdown\n"
        "            lines[newIndex].classList.remove('rendered-line');\n"
        "            lines[newIndex].classList.add('current-line');\n"
        "            showLineAsMarkdown(newIndex);\n"
        "            \n"
        "            currentLineIndex = newIndex;\n"
        "            statusDiv.textContent = `Ligne courante: ${currentLineIndex} | Contenu: ${lineContents[currentLineIndex]}`;\n"
        "            \n"
        "            console.log('=== SWITCH COMPLETE ===\\n');\n"
        "        }\n"
        "        \n"
        "        // Event listeners with detailed logging\n"
        "        editor.addEventListener('click', function(e) {\n"
        "            console.log('Click event:', e.target);\n"
        "            \n"
        "            let clickedLine = e.target;\n"
        "            if (!clickedLine.classList.contains('editor-line')) {\n"
        "                clickedLine = clickedLine.closest('.editor-line');\n"
        "            }\n"
        "            \n"
        "            if (clickedLine && clickedLine.dataset.line) {\n"
        "                const lineIndex = parseInt(clickedLine.dataset.line);\n"
        "                console.log('Clicked on line', lineIndex);\n"
        "                switchToLine(lineIndex);\n"
        "            }\n"
        "        });\n"
        "        \n"
        "        editor.addEventListener('keyup', function(e) {\n"
        "            // Update current line content when typing\n"
        "            if (lines[currentLineIndex]) {\n"
        "                lineContents[currentLineIndex] = lines[currentLineIndex].textContent || '';\n"
        "                statusDiv.textContent = `Ligne courante: ${currentLineIndex} | Contenu: ${lineContents[currentLineIndex]}`;\n"
        "            }\n"
        "        });\n"
        "        \n"
        "        // Initialize - render all non-current lines\n"
        "        console.log('=== INITIALIZING ===');\n"
        "        lines.forEach((line, index) => {\n"
        "            if (index !== currentLineIndex) {\n"
        "                renderLineAsHtml(index);\n"
        "            } else {\n"
        "                showLineAsMarkdown(index);\n"
        "            }\n"
        "        });\n"
        "        \n"
        "        // Focus first line\n"
        "        setTimeout(() => {\n"
        "            if (lines[0]) {\n"
        "                lines[0].focus();\n"
        "                console.log('Focused first line');\n"
        "            }\n"
        "        }, 500);\n"
        "    </script>\n"
        "</body>\n"
        "</html>";
        
        [webView loadHTMLString:htmlContent baseURL:nil];
        [[window contentView] addSubview:webView];
        
        [window center];
        [window makeKeyAndOrderFront:nil];
        [app activateIgnoringOtherApps:YES];
        
        NSLog(@"ðŸš€ Final hybrid version with fixed line switching!");
        
        [app run];
    }
    
    return 0;
}