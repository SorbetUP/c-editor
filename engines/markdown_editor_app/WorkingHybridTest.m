#import <Cocoa/Cocoa.h>
#import <WebKit/WebKit.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSApplication *app = [NSApplication sharedApplication];
        [app setActivationPolicy:NSApplicationActivationPolicyRegular];
        
        // Create basic window
        NSRect frame = NSMakeRect(100, 100, 1000, 700);
        NSWindow *window = [[NSWindow alloc] 
            initWithContentRect:frame
            styleMask:(NSWindowStyleMaskTitled | NSWindowStyleMaskClosable | NSWindowStyleMaskResizable)
            backing:NSBackingStoreBuffered 
            defer:NO];
        
        [window setTitle:@"Working Hybrid Test"];
        [window setBackgroundColor:[NSColor colorWithRed:0.102 green:0.102 blue:0.102 alpha:1.0]];
        
        // Create WebView that exactly copies the web version
        NSRect webFrame = NSMakeRect(20, 20, 960, 660);
        WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];
        WKWebView *webView = [[WKWebView alloc] initWithFrame:webFrame configuration:config];
        [webView setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
        
        // Load the exact same content as the web version
        NSString *htmlContent = @"<!DOCTYPE html>\n"
        "<html lang=\"fr\">\n"
        "<head>\n"
        "    <meta charset=\"UTF-8\">\n"
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
        "    <title>Working Hybrid Test</title>\n"
        "    <style>\n"
        "        * {\n"
        "            margin: 0;\n"
        "            padding: 0;\n"
        "            box-sizing: border-box;\n"
        "        }\n"
        "\n"
        "        body {\n"
        "            background: #1a1a1a;\n"
        "            color: #e0e0e0;\n"
        "            font-family: 'Monaco', 'Consolas', monospace;\n"
        "            height: 100vh;\n"
        "            padding: 20px;\n"
        "            overflow: hidden;\n"
        "        }\n"
        "\n"
        "        .editor-line {\n"
        "            min-height: 1.8em;\n"
        "            padding: 4px 8px;\n"
        "            margin: 0;\n"
        "            border-radius: 3px;\n"
        "            transition: background-color 0.2s ease;\n"
        "            cursor: text;\n"
        "            font-size: 14px;\n"
        "            line-height: 1.8;\n"
        "            outline: none;\n"
        "            border: none;\n"
        "        }\n"
        "\n"
        "        .editor-line.current-line {\n"
        "            background-color: rgba(76, 110, 245, 0.1);\n"
        "            border-left: 3px solid #4c6ef5;\n"
        "            padding-left: 15px;\n"
        "        }\n"
        "\n"
        "        .editor-line.rendered-line {\n"
        "            background-color: rgba(255, 255, 255, 0.02);\n"
        "        }\n"
        "\n"
        "        .editor-line:empty::before {\n"
        "            content: '\\200B';\n"
        "            color: transparent;\n"
        "        }\n"
        "\n"
        "        .editor-line strong {\n"
        "            color: #51cf66;\n"
        "            font-weight: bold;\n"
        "        }\n"
        "\n"
        "        .editor-line em {\n"
        "            color: #ffd43b;\n"
        "            font-style: italic;\n"
        "        }\n"
        "\n"
        "        .editor-line h1, .editor-line h2, .editor-line h3 {\n"
        "            color: #4c6ef5;\n"
        "            margin: 0;\n"
        "            display: inline;\n"
        "        }\n"
        "\n"
        "        .editor-line h1 { font-size: 24px; }\n"
        "        .editor-line h2 { font-size: 20px; }\n"
        "        .editor-line h3 { font-size: 18px; }\n"
        "\n"
        "        .editor-line u {\n"
        "            text-decoration: underline;\n"
        "            color: #ff6b6b;\n"
        "        }\n"
        "\n"
        "        .editor-line mark {\n"
        "            background: #ffd43b;\n"
        "            color: #000;\n"
        "            padding: 1px 2px;\n"
        "        }\n"
        "    </style>\n"
        "</head>\n"
        "<body>\n"
        "    <div id=\"hybridEditor\" contenteditable=\"true\" spellcheck=\"false\">\n"
        "        <div class=\"editor-line current-line\" data-line=\"0\"># Titre</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"1\"></div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"2\">Écrivez votre markdown ici...</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"3\"></div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"4\">Exemple:</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"5\">- **Gras**</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"6\">- *Italique*</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"7\">- ==Surligné==</div>\n"
        "        <div class=\"editor-line rendered-line\" data-line=\"8\">- ++Souligné++</div>\n"
        "    </div>\n"
        "\n"
        "    <script>\n"
        "        let currentLineIndex = 0;\n"
        "        const editor = document.getElementById('hybridEditor');\n"
        "        const lines = Array.from(editor.querySelectorAll('.editor-line'));\n"
        "        const lineContents = [];\n"
        "\n"
        "        // Store initial line contents\n"
        "        lines.forEach((line, index) => {\n"
        "            lineContents[index] = line.textContent || '';\n"
        "        });\n"
        "\n"
        "        // Enhanced markdown to HTML converter\n"
        "        function markdownToHtml(text) {\n"
        "            if (!text.trim()) return '&nbsp;';\n"
        "            \n"
        "            let html = text;\n"
        "            \n"
        "            // Headers\n"
        "            html = html.replace(/^# (.+)$/gm, '<h1>$1</h1>');\n"
        "            html = html.replace(/^## (.+)$/gm, '<h2>$1</h2>');\n"
        "            html = html.replace(/^### (.+)$/gm, '<h3>$1</h3>');\n"
        "            \n"
        "            // Bold (**text**)\n"
        "            html = html.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>');\n"
        "            \n"
        "            // Italic (*text*)\n"
        "            html = html.replace(/\\*([^*]+)\\*/g, '<em>$1</em>');\n"
        "            \n"
        "            // Highlight (==text==)\n"
        "            html = html.replace(/==([^=]+)==/g, '<mark>$1</mark>');\n"
        "            \n"
        "            // Underline (++text++)\n"
        "            html = html.replace(/\\+\\+([^+]+)\\+\\+/g, '<u>$1</u>');\n"
        "            \n"
        "            console.log('Markdown conversion:', text, '->', html);\n"
        "            return html;\n"
        "        }\n"
        "\n"
        "        function renderLineAsHtml(lineIndex) {\n"
        "            const line = lines[lineIndex];\n"
        "            if (!line) return;\n"
        "            \n"
        "            const content = lineContents[lineIndex] || '';\n"
        "            const renderedHtml = markdownToHtml(content);\n"
        "            \n"
        "            console.log('Rendering line', lineIndex, 'as HTML:', content, '->', renderedHtml);\n"
        "            line.innerHTML = renderedHtml;\n"
        "        }\n"
        "\n"
        "        function showLineAsMarkdown(lineIndex) {\n"
        "            const line = lines[lineIndex];\n"
        "            if (!line) return;\n"
        "            \n"
        "            const content = lineContents[lineIndex] || '';\n"
        "            console.log('DEBUG: Showing line', lineIndex, 'as markdown. Content:', content);\n"
        "            console.log('DEBUG: Line element before:', line.innerHTML);\n"
        "            \n"
        "            // Clear HTML content first\n"
        "            line.innerHTML = '';\n"
        "            \n"
        "            // Set as plain text (this should show raw markdown)\n"
        "            line.textContent = content;\n"
        "            \n"
        "            console.log('DEBUG: Line element after:', line.innerHTML, 'textContent:', line.textContent);\n"
        "        }\n"
        "\n"
        "        function updateLineStates() {\n"
        "            const selection = window.getSelection();\n"
        "            if (selection.rangeCount === 0) return;\n"
        "\n"
        "            let node = selection.anchorNode;\n"
        "            while (node && node !== editor) {\n"
        "                if (node.classList && node.classList.contains('editor-line')) {\n"
        "                    const newLineIndex = parseInt(node.dataset.line);\n"
        "                    if (newLineIndex !== currentLineIndex) {\n"
        "                        console.log('Line changed from', currentLineIndex, 'to', newLineIndex);\n"
        "\n"
        "                        // Save current line content before switching\n"
        "                        if (lines[currentLineIndex]) {\n"
        "                            lineContents[currentLineIndex] = lines[currentLineIndex].textContent || '';\n"
        "                            console.log('Saved line', currentLineIndex, 'content:', lineContents[currentLineIndex]);\n"
        "                        }\n"
        "\n"
        "                        // Render old current line as HTML\n"
        "                        if (lines[currentLineIndex]) {\n"
        "                            lines[currentLineIndex].classList.remove('current-line');\n"
        "                            lines[currentLineIndex].classList.add('rendered-line');\n"
        "                            renderLineAsHtml(currentLineIndex);\n"
        "                        }\n"
        "\n"
        "                        // Show new current line as markdown\n"
        "                        lines[newLineIndex].classList.remove('rendered-line');\n"
        "                        lines[newLineIndex].classList.add('current-line');\n"
        "                        showLineAsMarkdown(newLineIndex);\n"
        "\n"
        "                        currentLineIndex = newLineIndex;\n"
        "                        \n"
        "                        // Focus the new line\n"
        "                        setTimeout(() => {\n"
        "                            lines[newLineIndex].focus();\n"
        "                        }, 10);\n"
        "                    }\n"
        "                    break;\n"
        "                }\n"
        "                node = node.parentNode;\n"
        "            }\n"
        "        }\n"
        "\n"
        "        // Update line content when typing\n"
        "        editor.addEventListener('input', () => {\n"
        "            if (lines[currentLineIndex]) {\n"
        "                lineContents[currentLineIndex] = lines[currentLineIndex].textContent || '';\n"
        "            }\n"
        "        });\n"
        "\n"
        "        editor.addEventListener('click', updateLineStates);\n"
        "        editor.addEventListener('keyup', updateLineStates);\n"
        "        editor.addEventListener('focus', updateLineStates);\n"
        "\n"
        "        // Initialize: render all non-current lines as HTML\n"
        "        lines.forEach((line, index) => {\n"
        "            if (index !== currentLineIndex) {\n"
        "                renderLineAsHtml(index);\n"
        "            } else {\n"
        "                showLineAsMarkdown(index);\n"
        "            }\n"
        "        });\n"
        "\n"
        "        // Focus first line\n"
        "        setTimeout(() => {\n"
        "            lines[0].focus();\n"
        "        }, 100);\n"
        "    </script>\n"
        "</body>\n"
        "</html>";
        
        [webView loadHTMLString:htmlContent baseURL:nil];
        
        [[window contentView] addSubview:webView];
        
        // Show window
        [window center];
        [window makeKeyAndOrderFront:nil];
        [app activateIgnoringOtherApps:YES];
        
        NSLog(@"🚀 Working hybrid test ready!");
        
        // Run app
        [app run];
    }
    
    return 0;
}